{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template: Creates thedotts web application.",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Default": "default"
        },
        "DNSName": {
            "Description": "DNS Name for the Application",
            "Type": "String",
            "Default": "rubyonrails"
        },
        "DNSDomain": {
            "Description": "DNS Name for the Application",
            "Type": "String"
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t2.micro",
                "t2.small"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "GithubUrl": {
            "Description": "Url for a Github repo to clone",
            "Type": "String",
            "Default": "https://github.com/dcrbsltd/aws-ec2-rubyonrails.git"
        },
        "SSHLocation": {
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "Default": "0.0.0.0/0",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
        "AWSRegion2HostedZoneId": {
            "eu-west-1": {
                "HostedZoneId": "Z1BKCTXD74EZPE"
            },
            "eu-central-1": {
                "HostedZoneId": "Z21DNDUVLTQW6Q"
            }
        },
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "PV64"
            },
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "eu-west-1": {
                "PV64": "ami-aa8f28dd",
                "HVM64": "ami-748e2903",
                "HVMG2": "ami-00913777"
            },
            "eu-central-1": {
                "PV64": "ami-a03503bd",
                "HVM64": "ami-b43503a9",
                "HVMG2": "ami-b03503ad"
            }
        }
    },
    "Conditions": {
        "Is-EC2-VPC": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AWS::Region"
                        },
                        "eu-central-1"
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AWS::Region"
                        },
                        "cn-north-1"
                    ]
                }
            ]
        },
        "Is-EC2-Classic": {
            "Fn::Not": [
                {
                    "Condition": "Is-EC2-VPC"
                }
            ]
        }
    },
    "Resources": {
        "IAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "DependsOn": "IAMRole",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "IAMRole"
                    }
                ]
            }
        },
        "RolePolicies": {
            "Type": "AWS::IAM::Policy",
            "DependsOn": "IAMRole",
            "Properties": {
                "PolicyName": "InstancePolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:Describe*"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "IAMRole"
                    }
                ]
            }
        },
        "EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "InstanceId": {
                    "Ref": "EC2Instance"
                }
            }
        },
        "EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "CreationPolicy" : {
              "ResourceSignal" : {
                "Count" : "1",
                "Timeout" : "PT60M"
              }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "full_install": [
                            "install_cfn",
                            "configure_nginx",
                            "install_application"
                        ]
                    },
                    "install_cfn": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource EC2Instance ",
                                            "         --configsets full_install ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "configure_nginx": {
                        "packages": {
                            "yum": {
                                "nginx": []
                            }
                        },
                        "files": {
                            "/etc/nginx/conf.d/rubyonrails.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "upstream app {\n",
                                            "  server unix:/tmp/unicorn.sock fail_timeout=0;\n",
                                            "}\n",
                                            "server {\n",
                                            "  listen 80;\n",
                                            "  server_name localhost;\n",
                                            "  root /home/ec2-user/rubyonrails/public;\n",
                                            "  try_files $uri/index.html $uri @app;\n",
                                            "  location @app {\n",
                                            "    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n",
                                            "    proxy_set_header Host $http_host;\n",
                                            "    proxy_redirect off;\n",
                                            "    proxy_pass http://app;\n",
                                            "  }\n",
                                            "  gzip on;\n",
                                            "  gzip_types application/json text/css;\n",
                                            "  error_page 404 /404.html;\n",
                                            "  error_page 500 502 503 504 /500.html;\n",
                                            "  client_max_body_size 4G;\n",
                                            "  keepalive_timeout 10;\n",
                                            "}\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "nginx": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/nginx/nginx.conf",
                                        "/etc/nginx/conf.d/rubyonrails.conf"
                                    ],
                                    "sources": [
                                        "/home/ec2-user/latest"
                                    ]
                                }
                            }
                        }
                    },
                    "install_application": {
                        "packages": {
                            "yum": {
                                "gcc-c++": [],
                                "make": [],
                                "git": [],
                                "libxml2": [],
                                "libxml2-devel": [],
                                "libxslt": [],
                                "libxslt-devel": [],
                                "patch": [],
                                "sqlite-devel": [],
                                "ruby-devel": [],
                                "rubygems": [],
                                "rubygem-io-console": [],
                                "ImageMagick-devel": []
                            },
                            "rubygems": {
                                "rails": [],
                                "unicorn": []
                            }
                        },
                        "files": {
                            "/tmp/install_application": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "export PATH=$PATH:/usr/local/bin\n",
                                            "export RAILS_ENV=production\n",
                                            "cd /home/ec2-user\n",
                                            "if pgrep ruby &> /dev/null ; then pkill -TERM ruby ; fi\n",
                                            "git clone ",
                                            {
                                              "Ref": "GithubUrl"  
                                            },
                                            " rubyonrails\n",
                                            "bundle install --deployment\n",
                                            "bundle exec rake db:migrate\n"
                                        ]
                                    ]
                                },
                                "mode": "000555",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            }
                        },
                        "commands": {
                            "install_application": {
                                "command": "su ec2-user -c /tmp/install_application > /var/log/install_application.log 2>&1"
                            },
                            "01_create_symlinks": {
                                "command": "rm -rf /etc/init.d/unicorn; ln -s /home/ec2-user/rubyonrails/bin/unicorn /etc/init.d/unicorn; chmod 0755 /home/ec2-user/rubyonrails/bin/unicorn"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "unicorn": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "DNSName"
                                    },
                                    ".",
                                    {
                                        "Ref": "DNSDomain"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource EC2Instance ",
                                "         --configsets full_install ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "         --resource EC2Instance ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            }
        },
        "RecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "DNSDomain"
                            },
                            "."
                        ]
                    ]
                },
                "Comment": "RubyOnRails application.",
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "DNSName"
                            },
                            "."
                        ]
                    ]
                },
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Ref": "EIP"
                    }
                ]
            }
        }
    }
}